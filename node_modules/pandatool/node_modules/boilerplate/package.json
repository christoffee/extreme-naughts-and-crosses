{
  "name": "boilerplate",
  "version": "0.1.5",
  "description": "Generic, highly customizeable application generator",
  "main": "./lib/index.js",
  "bin": {
    "boilerplate": "./bin/boilerplate"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "contributors": [
    {
      "name": "Erin Noe-Payne",
      "email": "saizul@gmail.com"
    },
    {
      "name": "Paul Vencill",
      "email": "paul.vencill@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/pvencill/boilerplate.git"
  },
  "keywords": [
    "generator",
    "nodejs"
  ],
  "author": {
    "name": "Paul Vencill"
  },
  "license": "BSD",
  "dependencies": {
    "wrench": "~1.4.3",
    "commander": "~1.1.1",
    "underscore": "~1.4.2",
    "handlebars": "~1.0.7"
  },
  "readme": "Boilerplate\n=====\n\nFast, generic, highly customizeable application generator using node.js.\n\n## Installation\n\n\t$ npm install -g boilerplate\n\n## Quick start\n\nThe current version of boilerplate just recursively copies a directory or git repo to the location of your choosing.  We intend to add file templating in the next release update.  Using the command line, the format is: \n\n    $ boilerplate <src> <dst>\n\nGenerating based on a local template would therefore look like:\n\n    $ boilerplate ~/templates/some-app ~/workspace/my-new-app\n\nAnd generating based on a git URL would be similar:\n\n    $ boilerplate git://github.com/myname/myrepo ~/workspace/my-new-app\n\nThe latter would work with http:// or https:// as well as git://.\n\nA boilerplate folder can also include files that are setup to act as templates, with data injected in to customize the file for the particular deployment that you're working on.  Any file with the extension .template is assumed to be a handlebars-formatted file ripe for replacement.  Let's say you have the following file:\n\n/Users/me/mydata.json.template\n```js\n{ \"name\" : \"{{name}}\"}\n```\n\nRunning the following command \n\n\t$ boilerplate /Users/me /Users/other name:Howie\n\nWould result in the /Users/me directory being copied to /Users/other and the creation of /Users/other/mydata.json with the following content:\n```js\n{ \"name\" : \"Howie\"}\n```\n\n## Using Boilerplate Programmatically\n\nBoilerplate can be used programmatically as well.  An app can simply require the module and use its api:\n\n```js\nvar boilerplate = require('boilerplate');\n\nboilerplate.generate('git://github.com/myname/myrepo', '~/workspace/my-new-app', function(err){  console.log(err); });\n\nboilerplate.template('~/workspace/my-new-app', templateData, function(err){ console.log(err);}); // where templateData is a JS object to be passed into the handlebars template\n\n```\n\n## Preferences\n\nWhile not exposed to the cli yet, the api offers the ability to add and remove aliases for sources as well.  This information is stored in a file in your home directory called .node-boilerplate.json.  Setting it programmatically is as simple as:\n\n```js\nboilerplate.register('default', 'git://github.com/myname/myrepo');\n```\n\nAfter that, using the term 'default' as the source in either the cli or programmatically will resolve to the git URL listed above.  \n",
  "readmeFilename": "README.md",
  "_id": "boilerplate@0.1.5",
  "dist": {
    "shasum": "8a8703f92dfe40eea97c06f26c65c6f344f6459e",
    "tarball": "http://registry.npmjs.org/boilerplate/-/boilerplate-0.1.5.tgz"
  },
  "_npmVersion": "1.2.0",
  "_npmUser": {
    "name": "autoric",
    "email": "saizul@gmail.com"
  },
  "maintainers": [
    {
      "name": "tblobaum",
      "email": "tblobaum@gmail.com"
    },
    {
      "name": "pvencill",
      "email": "paul@cyberstride.net"
    },
    {
      "name": "autoric",
      "email": "saizul@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "8a8703f92dfe40eea97c06f26c65c6f344f6459e",
  "_from": "boilerplate@^0.1.5",
  "_resolved": "https://registry.npmjs.org/boilerplate/-/boilerplate-0.1.5.tgz"
}
